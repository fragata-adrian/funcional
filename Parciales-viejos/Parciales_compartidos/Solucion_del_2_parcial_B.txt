-------------- Ejercicio 1 -----------------

-- Definir sin usar recursión la función
-- filtrarPares :: Int -> [[(Int,Int)]] -> [[(Int,Int)]]] que, dado un entero k y 
-- una lista de listas de pares de enteros, filtra los pares cuya suma es igual a k.
-- Ej: filtrarPares 1 [[(1,-1)], [(3,-2),(1,5)], [(0,1),(2,-1)]] ~> [[], [(3,-2)], [(0,1),(2,-1)]].

filtrarPares :: Int -> [[(Int,Int)]] -> [[(Int,Int)]]]
filtrarPares k = map (filter (\(x,y) -> x+y == k))

-------------- Ejercicio 2 -----------------

-- Definir, usando el esquema de fold adecuado, la función
-- restas :: [Int] -> Int que, dada una lista de enteros,
-- devuelve la resta de todos ellos asociada a izquierda.
-- Ej: restas [1,2,3,4] ~> (((1 - 2) - 3) - 4)

restas :: [Int] -> Int
restas = foldl1 (-)

-------------- Ejercicio 3 -----------------

data Nat = Zero | Succ Nat

-- Definir la función diferencia :: Nat -> Nat -> Nat
-- que dados dos naturales n y m devuelve la resta n-m si n es mayor que m,
-- y devuelve m-n en otro caso.
--Ej: diferencia (Succ (Succ Zero)) (Succ Zero) ~> Succ Zero
-- diferencia (Succ Zero) (Succ (Succ Zero)) ~> Succ Zero

diferencia :: Nat -> Nat -> Nat
diferencia Zero m = m
diferencia n Zero = n
diferencia (Succ n) (Succ m) = diferencia n m

-------------- Ejercicio 4 -----------------

data Arbol a = Hoja a | Nodo a (Arbol a) (Arbol a)

foldA :: (a -> b) -> (a -> b -> b -> b) -> Arbol a -> b
foldA f _ ( Hoja x) = f x
foldA f g ( Nodo x izq der) = g x ( foldA f g izq ) ( foldA f g der)

-- a) Definir, sin usar recursión explícita, una función esHoja :: Int -> Arbol Int -> Bool
-- que devuelve True sii el entero es una hoja del árbol.
-- Ej: esHoja 3 (Nodo 1 (Nodo 2 (Hoja 0) (Hoja 3)) (Hoja (-3))) ~> True
--     esHoja 2 (Nodo 1 (Nodo 2 (Hoja 0) (Hoja 3)) (Hoja (-3))) ~> False

esHoja :: Int -> Arbol a -> [a]
esHoja x = foldA (==x) (\_ ri rd -> ri || rd)


-- b) Definir, sin usar recursión explícita, una función pasarALista :: Arbol (Int, Bool) -> [(Int,Bool)]
-- que devuelve la lista de todos los pares que aparecen con True en el árbol.
-- Ej: pasarALista (Nodo (1, True) ( Nodo (2, False) ( Hoja (0, True)) ( Hoja (5, False))) ( Hoja (-3, True))) 
-- ~> [(1, True), (0, True), (-3, True)]

pasarALista :: Arbol (Int, Bool) -> [Int]
pasarALista = filter snd . foldA (\x -> [x]) (\x ri rd -> x : (ri ++ rd))